// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bag.proto

// Protobuf Java Version: 3.25.1
package com.github.jameshnsears.chance.data.protocolbuffer;

/**
 * Protobuf type {@code com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer}
 */
public final class BagProtocolBuffer extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer)
        BagProtocolBufferOrBuilder {
    public static final int TABROWCHANCE_FIELD_NUMBER = 1;
    public static final int BAGDEMOBAG_FIELD_NUMBER = 2;
    public static final int BAGZOOM_FIELD_NUMBER = 3;
    public static final int DICE_FIELD_NUMBER = 4;
    public static final int ROLLSEQUENTIALLY_FIELD_NUMBER = 5;
    public static final int ROLLZOOM_FIELD_NUMBER = 6;
    public static final int ROLLTITLE_FIELD_NUMBER = 7;
    public static final int ROLLSLIDENUMBER_FIELD_NUMBER = 8;
    public static final int ROLLTOTAL_FIELD_NUMBER = 9;
    public static final int ROLLHISTORY_FIELD_NUMBER = 10;
    public static final int ROLLSOUND_FIELD_NUMBER = 11;
    private static final long serialVersionUID = 0L;
    // @@protoc_insertion_point(class_scope:com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer)
    private static final com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer DEFAULT_INSTANCE;
    private static final com.google.protobuf.Parser<BagProtocolBuffer>
            PARSER = new com.google.protobuf.AbstractParser<BagProtocolBuffer>() {
        @java.lang.Override
        public BagProtocolBuffer parsePartialFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws com.google.protobuf.InvalidProtocolBufferException {
            Builder builder = newBuilder();
            try {
                builder.mergeFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.setUnfinishedMessage(builder.buildPartial());
            } catch (com.google.protobuf.UninitializedMessageException e) {
                throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
            } catch (java.io.IOException e) {
                throw new com.google.protobuf.InvalidProtocolBufferException(e)
                        .setUnfinishedMessage(builder.buildPartial());
            }
            return builder.buildPartial();
        }
    };

    static {
        DEFAULT_INSTANCE = new com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer();
    }

    private int tabRowChance_ = 0;
    private boolean bagDemoBag_ = false;
    private int bagZoom_ = 0;
    @SuppressWarnings("serial")
    private java.util.List<com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer> dice_;
    private boolean rollSequentially_ = false;
    private int rollZoom_ = 0;
    private boolean rollTitle_ = false;
    private boolean rollSlideNumber_ = false;
    private boolean rollTotal_ = false;
    private boolean rollHistory_ = false;
    private boolean rollSound_ = false;
    private byte memoizedIsInitialized = -1;

    // Use BagProtocolBuffer.newBuilder() to construct.
    private BagProtocolBuffer(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
    }

    private BagProtocolBuffer() {
        dice_ = java.util.Collections.emptyList();
    }

    public static com.google.protobuf.Descriptors.Descriptor
    getDescriptor() {
        return com.github.jameshnsears.chance.data.protocolbuffer.Bag.internal_static_com_github_jameshnsears_chance_data_protocolbuffer_BagProtocolBuffer_descriptor;
    }

    public static com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
    }

    public static com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
    }

    public static com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer parseFrom(java.io.InputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
    }

    public static com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input);
    }

    public static com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
                .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
    }

    public static Builder newBuilder(com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    public static com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer getDefaultInstance() {
        return DEFAULT_INSTANCE;
    }

    public static com.google.protobuf.Parser<BagProtocolBuffer> parser() {
        return PARSER;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
            UnusedPrivateParameter unused) {
        return new BagProtocolBuffer();
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
    internalGetFieldAccessorTable() {
        return com.github.jameshnsears.chance.data.protocolbuffer.Bag.internal_static_com_github_jameshnsears_chance_data_protocolbuffer_BagProtocolBuffer_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                        com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer.class, com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer.Builder.class);
    }

    /**
     * <code>int32 tabRowChance = 1;</code>
     *
     * @return The tabRowChance.
     */
    @java.lang.Override
    public int getTabRowChance() {
        return tabRowChance_;
    }

    /**
     * <code>bool bagDemoBag = 2;</code>
     *
     * @return The bagDemoBag.
     */
    @java.lang.Override
    public boolean getBagDemoBag() {
        return bagDemoBag_;
    }

    /**
     * <code>int32 bagZoom = 3;</code>
     *
     * @return The bagZoom.
     */
    @java.lang.Override
    public int getBagZoom() {
        return bagZoom_;
    }

    /**
     * <code>repeated .com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer dice = 4;</code>
     */
    @java.lang.Override
    public java.util.List<com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer> getDiceList() {
        return dice_;
    }

    /**
     * <code>repeated .com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer dice = 4;</code>
     */
    @java.lang.Override
    public java.util.List<? extends com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBufferOrBuilder>
    getDiceOrBuilderList() {
        return dice_;
    }

    /**
     * <code>repeated .com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer dice = 4;</code>
     */
    @java.lang.Override
    public int getDiceCount() {
        return dice_.size();
    }

    /**
     * <code>repeated .com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer dice = 4;</code>
     */
    @java.lang.Override
    public com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer getDice(int index) {
        return dice_.get(index);
    }

    /**
     * <code>repeated .com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer dice = 4;</code>
     */
    @java.lang.Override
    public com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBufferOrBuilder getDiceOrBuilder(
            int index) {
        return dice_.get(index);
    }

    /**
     * <code>bool rollSequentially = 5;</code>
     *
     * @return The rollSequentially.
     */
    @java.lang.Override
    public boolean getRollSequentially() {
        return rollSequentially_;
    }

    /**
     * <code>int32 rollZoom = 6;</code>
     *
     * @return The rollZoom.
     */
    @java.lang.Override
    public int getRollZoom() {
        return rollZoom_;
    }

    /**
     * <code>bool rollTitle = 7;</code>
     *
     * @return The rollTitle.
     */
    @java.lang.Override
    public boolean getRollTitle() {
        return rollTitle_;
    }

    /**
     * <code>bool rollSlideNumber = 8;</code>
     *
     * @return The rollSlideNumber.
     */
    @java.lang.Override
    public boolean getRollSlideNumber() {
        return rollSlideNumber_;
    }

    /**
     * <code>bool rollTotal = 9;</code>
     *
     * @return The rollTotal.
     */
    @java.lang.Override
    public boolean getRollTotal() {
        return rollTotal_;
    }

    /**
     * <code>bool rollHistory = 10;</code>
     *
     * @return The rollHistory.
     */
    @java.lang.Override
    public boolean getRollHistory() {
        return rollHistory_;
    }

    /**
     * <code>bool rollSound = 11;</code>
     *
     * @return The rollSound.
     */
    @java.lang.Override
    public boolean getRollSound() {
        return rollSound_;
    }

    @java.lang.Override
    public boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
            throws java.io.IOException {
        if (tabRowChance_ != 0) {
            output.writeInt32(1, tabRowChance_);
        }
        if (bagDemoBag_) {
            output.writeBool(2, bagDemoBag_);
        }
        if (bagZoom_ != 0) {
            output.writeInt32(3, bagZoom_);
        }
        for (int i = 0; i < dice_.size(); i++) {
            output.writeMessage(4, dice_.get(i));
        }
        if (rollSequentially_) {
            output.writeBool(5, rollSequentially_);
        }
        if (rollZoom_ != 0) {
            output.writeInt32(6, rollZoom_);
        }
        if (rollTitle_) {
            output.writeBool(7, rollTitle_);
        }
        if (rollSlideNumber_) {
            output.writeBool(8, rollSlideNumber_);
        }
        if (rollTotal_) {
            output.writeBool(9, rollTotal_);
        }
        if (rollHistory_) {
            output.writeBool(10, rollHistory_);
        }
        if (rollSound_) {
            output.writeBool(11, rollSound_);
        }
        getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (tabRowChance_ != 0) {
            size += com.google.protobuf.CodedOutputStream
                    .computeInt32Size(1, tabRowChance_);
        }
        if (bagDemoBag_) {
            size += com.google.protobuf.CodedOutputStream
                    .computeBoolSize(2, bagDemoBag_);
        }
        if (bagZoom_ != 0) {
            size += com.google.protobuf.CodedOutputStream
                    .computeInt32Size(3, bagZoom_);
        }
        for (int i = 0; i < dice_.size(); i++) {
            size += com.google.protobuf.CodedOutputStream
                    .computeMessageSize(4, dice_.get(i));
        }
        if (rollSequentially_) {
            size += com.google.protobuf.CodedOutputStream
                    .computeBoolSize(5, rollSequentially_);
        }
        if (rollZoom_ != 0) {
            size += com.google.protobuf.CodedOutputStream
                    .computeInt32Size(6, rollZoom_);
        }
        if (rollTitle_) {
            size += com.google.protobuf.CodedOutputStream
                    .computeBoolSize(7, rollTitle_);
        }
        if (rollSlideNumber_) {
            size += com.google.protobuf.CodedOutputStream
                    .computeBoolSize(8, rollSlideNumber_);
        }
        if (rollTotal_) {
            size += com.google.protobuf.CodedOutputStream
                    .computeBoolSize(9, rollTotal_);
        }
        if (rollHistory_) {
            size += com.google.protobuf.CodedOutputStream
                    .computeBoolSize(10, rollHistory_);
        }
        if (rollSound_) {
            size += com.google.protobuf.CodedOutputStream
                    .computeBoolSize(11, rollSound_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
            return true;
        }
        if (!(obj instanceof BagProtocolBuffer other)) {
            return super.equals(obj);
        }

        if (getTabRowChance()
                != other.getTabRowChance()) return false;
        if (getBagDemoBag()
                != other.getBagDemoBag()) return false;
        if (getBagZoom()
                != other.getBagZoom()) return false;
        if (!getDiceList()
                .equals(other.getDiceList())) return false;
        if (getRollSequentially()
                != other.getRollSequentially()) return false;
        if (getRollZoom()
                != other.getRollZoom()) return false;
        if (getRollTitle()
                != other.getRollTitle()) return false;
        if (getRollSlideNumber()
                != other.getRollSlideNumber()) return false;
        if (getRollTotal()
                != other.getRollTotal()) return false;
        if (getRollHistory()
                != other.getRollHistory()) return false;
        if (getRollSound()
                != other.getRollSound()) return false;
        return getUnknownFields().equals(other.getUnknownFields());
    }

    @java.lang.Override
    public int hashCode() {
        if (memoizedHashCode != 0) {
            return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + TABROWCHANCE_FIELD_NUMBER;
        hash = (53 * hash) + getTabRowChance();
        hash = (37 * hash) + BAGDEMOBAG_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                getBagDemoBag());
        hash = (37 * hash) + BAGZOOM_FIELD_NUMBER;
        hash = (53 * hash) + getBagZoom();
        if (getDiceCount() > 0) {
            hash = (37 * hash) + DICE_FIELD_NUMBER;
            hash = (53 * hash) + getDiceList().hashCode();
        }
        hash = (37 * hash) + ROLLSEQUENTIALLY_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                getRollSequentially());
        hash = (37 * hash) + ROLLZOOM_FIELD_NUMBER;
        hash = (53 * hash) + getRollZoom();
        hash = (37 * hash) + ROLLTITLE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                getRollTitle());
        hash = (37 * hash) + ROLLSLIDENUMBER_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                getRollSlideNumber());
        hash = (37 * hash) + ROLLTOTAL_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                getRollTotal());
        hash = (37 * hash) + ROLLHISTORY_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                getRollHistory());
        hash = (37 * hash) + ROLLSOUND_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
                getRollSound());
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
    }

    @java.lang.Override
    public Builder newBuilderForType() {
        return newBuilder();
    }

    @java.lang.Override
    public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
                ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BagProtocolBuffer> getParserForType() {
        return PARSER;
    }

    @java.lang.Override
    public com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
    }

    /**
     * Protobuf type {@code com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer}
     */
    public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer)
            com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBufferOrBuilder {
        private int bitField0_;
        private int tabRowChance_;
        private boolean bagDemoBag_;
        private int bagZoom_;
        private java.util.List<com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer> dice_ =
                java.util.Collections.emptyList();
        private com.google.protobuf.RepeatedFieldBuilderV3<
                com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer, com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer.Builder, com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBufferOrBuilder> diceBuilder_;
        private boolean rollSequentially_;
        private int rollZoom_;
        private boolean rollTitle_;
        private boolean rollSlideNumber_;
        private boolean rollTotal_;
        private boolean rollHistory_;
        private boolean rollSound_;

        // Construct using com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer.newBuilder()
        private Builder() {

        }

        private Builder(
                com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);

        }

        public static com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
            return com.github.jameshnsears.chance.data.protocolbuffer.Bag.internal_static_com_github_jameshnsears_chance_data_protocolbuffer_BagProtocolBuffer_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
            return com.github.jameshnsears.chance.data.protocolbuffer.Bag.internal_static_com_github_jameshnsears_chance_data_protocolbuffer_BagProtocolBuffer_fieldAccessorTable
                    .ensureFieldAccessorsInitialized(
                            com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer.class, com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer.Builder.class);
        }

        @java.lang.Override
        public Builder clear() {
            super.clear();
            bitField0_ = 0;
            tabRowChance_ = 0;
            bagDemoBag_ = false;
            bagZoom_ = 0;
            if (diceBuilder_ == null) {
                dice_ = java.util.Collections.emptyList();
            } else {
                dice_ = null;
                diceBuilder_.clear();
            }
            bitField0_ = (bitField0_ & ~0x00000008);
            rollSequentially_ = false;
            rollZoom_ = 0;
            rollTitle_ = false;
            rollSlideNumber_ = false;
            rollTotal_ = false;
            rollHistory_ = false;
            rollSound_ = false;
            return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
            return com.github.jameshnsears.chance.data.protocolbuffer.Bag.internal_static_com_github_jameshnsears_chance_data_protocolbuffer_BagProtocolBuffer_descriptor;
        }

        @java.lang.Override
        public com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer getDefaultInstanceForType() {
            return com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer.getDefaultInstance();
        }

        @java.lang.Override
        public com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer build() {
            com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer result = buildPartial();
            if (!result.isInitialized()) {
                throw newUninitializedMessageException(result);
            }
            return result;
        }

        @java.lang.Override
        public com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer buildPartial() {
            com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer result = new com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer(this);
            buildPartialRepeatedFields(result);
            if (bitField0_ != 0) {
                buildPartial0(result);
            }
            onBuilt();
            return result;
        }

        private void buildPartialRepeatedFields(com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer result) {
            if (diceBuilder_ == null) {
                if (((bitField0_ & 0x00000008) != 0)) {
                    dice_ = java.util.Collections.unmodifiableList(dice_);
                    bitField0_ = (bitField0_ & ~0x00000008);
                }
                result.dice_ = dice_;
            } else {
                result.dice_ = diceBuilder_.build();
            }
        }

        private void buildPartial0(com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer result) {
            int from_bitField0_ = bitField0_;
            if (((from_bitField0_ & 0x00000001) != 0)) {
                result.tabRowChance_ = tabRowChance_;
            }
            if (((from_bitField0_ & 0x00000002) != 0)) {
                result.bagDemoBag_ = bagDemoBag_;
            }
            if (((from_bitField0_ & 0x00000004) != 0)) {
                result.bagZoom_ = bagZoom_;
            }
            if (((from_bitField0_ & 0x00000010) != 0)) {
                result.rollSequentially_ = rollSequentially_;
            }
            if (((from_bitField0_ & 0x00000020) != 0)) {
                result.rollZoom_ = rollZoom_;
            }
            if (((from_bitField0_ & 0x00000040) != 0)) {
                result.rollTitle_ = rollTitle_;
            }
            if (((from_bitField0_ & 0x00000080) != 0)) {
                result.rollSlideNumber_ = rollSlideNumber_;
            }
            if (((from_bitField0_ & 0x00000100) != 0)) {
                result.rollTotal_ = rollTotal_;
            }
            if (((from_bitField0_ & 0x00000200) != 0)) {
                result.rollHistory_ = rollHistory_;
            }
            if (((from_bitField0_ & 0x00000400) != 0)) {
                result.rollSound_ = rollSound_;
            }
        }

        @java.lang.Override
        public Builder clone() {
            return super.clone();
        }

        @java.lang.Override
        public Builder setField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                java.lang.Object value) {
            return super.setField(field, value);
        }

        @java.lang.Override
        public Builder clearField(
                com.google.protobuf.Descriptors.FieldDescriptor field) {
            return super.clearField(field);
        }

        @java.lang.Override
        public Builder clearOneof(
                com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return super.clearOneof(oneof);
        }

        @java.lang.Override
        public Builder setRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                int index, java.lang.Object value) {
            return super.setRepeatedField(field, index, value);
        }

        @java.lang.Override
        public Builder addRepeatedField(
                com.google.protobuf.Descriptors.FieldDescriptor field,
                java.lang.Object value) {
            return super.addRepeatedField(field, value);
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer) {
                return mergeFrom((com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer) other);
            } else {
                super.mergeFrom(other);
                return this;
            }
        }

        public Builder mergeFrom(com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer other) {
            if (other == com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer.getDefaultInstance())
                return this;
            if (other.getTabRowChance() != 0) {
                setTabRowChance(other.getTabRowChance());
            }
            if (other.getBagDemoBag()) {
                setBagDemoBag(other.getBagDemoBag());
            }
            if (other.getBagZoom() != 0) {
                setBagZoom(other.getBagZoom());
            }
            if (diceBuilder_ == null) {
                if (!other.dice_.isEmpty()) {
                    if (dice_.isEmpty()) {
                        dice_ = other.dice_;
                        bitField0_ = (bitField0_ & ~0x00000008);
                    } else {
                        ensureDiceIsMutable();
                        dice_.addAll(other.dice_);
                    }
                    onChanged();
                }
            } else {
                if (!other.dice_.isEmpty()) {
                    if (diceBuilder_.isEmpty()) {
                        diceBuilder_.dispose();
                        diceBuilder_ = null;
                        dice_ = other.dice_;
                        bitField0_ = (bitField0_ & ~0x00000008);
                        diceBuilder_ =
                                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                                        getDiceFieldBuilder() : null;
                    } else {
                        diceBuilder_.addAllMessages(other.dice_);
                    }
                }
            }
            if (other.getRollSequentially()) {
                setRollSequentially(other.getRollSequentially());
            }
            if (other.getRollZoom() != 0) {
                setRollZoom(other.getRollZoom());
            }
            if (other.getRollTitle()) {
                setRollTitle(other.getRollTitle());
            }
            if (other.getRollSlideNumber()) {
                setRollSlideNumber(other.getRollSlideNumber());
            }
            if (other.getRollTotal()) {
                setRollTotal(other.getRollTotal());
            }
            if (other.getRollHistory()) {
                setRollHistory(other.getRollHistory());
            }
            if (other.getRollSound()) {
                setRollSound(other.getRollSound());
            }
            this.mergeUnknownFields(other.getUnknownFields());
            onChanged();
            return this;
        }

        @java.lang.Override
        public boolean isInitialized() {
            return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
                com.google.protobuf.CodedInputStream input,
                com.google.protobuf.ExtensionRegistryLite extensionRegistry)
                throws java.io.IOException {
            if (extensionRegistry == null) {
                throw new java.lang.NullPointerException();
            }
            try {
                boolean done = false;
                while (!done) {
                    int tag = input.readTag();
                    switch (tag) {
                        case 0:
                            done = true;
                            break;
                        case 8: {
                            tabRowChance_ = input.readInt32();
                            bitField0_ |= 0x00000001;
                            break;
                        } // case 8
                        case 16: {
                            bagDemoBag_ = input.readBool();
                            bitField0_ |= 0x00000002;
                            break;
                        } // case 16
                        case 24: {
                            bagZoom_ = input.readInt32();
                            bitField0_ |= 0x00000004;
                            break;
                        } // case 24
                        case 34: {
                            com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer m =
                                    input.readMessage(
                                            com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer.parser(),
                                            extensionRegistry);
                            if (diceBuilder_ == null) {
                                ensureDiceIsMutable();
                                dice_.add(m);
                            } else {
                                diceBuilder_.addMessage(m);
                            }
                            break;
                        } // case 34
                        case 40: {
                            rollSequentially_ = input.readBool();
                            bitField0_ |= 0x00000010;
                            break;
                        } // case 40
                        case 48: {
                            rollZoom_ = input.readInt32();
                            bitField0_ |= 0x00000020;
                            break;
                        } // case 48
                        case 56: {
                            rollTitle_ = input.readBool();
                            bitField0_ |= 0x00000040;
                            break;
                        } // case 56
                        case 64: {
                            rollSlideNumber_ = input.readBool();
                            bitField0_ |= 0x00000080;
                            break;
                        } // case 64
                        case 72: {
                            rollTotal_ = input.readBool();
                            bitField0_ |= 0x00000100;
                            break;
                        } // case 72
                        case 80: {
                            rollHistory_ = input.readBool();
                            bitField0_ |= 0x00000200;
                            break;
                        } // case 80
                        case 88: {
                            rollSound_ = input.readBool();
                            bitField0_ |= 0x00000400;
                            break;
                        } // case 88
                        default: {
                            if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                                done = true; // was an endgroup tag
                            }
                            break;
                        } // default:
                    } // switch (tag)
                } // while (!done)
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
                throw e.unwrapIOException();
            } finally {
                onChanged();
            } // finally
            return this;
        }

        /**
         * <code>int32 tabRowChance = 1;</code>
         *
         * @return The tabRowChance.
         */
        @java.lang.Override
        public int getTabRowChance() {
            return tabRowChance_;
        }

        /**
         * <code>int32 tabRowChance = 1;</code>
         *
         * @param value The tabRowChance to set.
         * @return This builder for chaining.
         */
        public Builder setTabRowChance(int value) {

            tabRowChance_ = value;
            bitField0_ |= 0x00000001;
            onChanged();
            return this;
        }

        /**
         * <code>int32 tabRowChance = 1;</code>
         *
         * @return This builder for chaining.
         */
        public Builder clearTabRowChance() {
            bitField0_ = (bitField0_ & ~0x00000001);
            tabRowChance_ = 0;
            onChanged();
            return this;
        }

        /**
         * <code>bool bagDemoBag = 2;</code>
         *
         * @return The bagDemoBag.
         */
        @java.lang.Override
        public boolean getBagDemoBag() {
            return bagDemoBag_;
        }

        /**
         * <code>bool bagDemoBag = 2;</code>
         *
         * @param value The bagDemoBag to set.
         * @return This builder for chaining.
         */
        public Builder setBagDemoBag(boolean value) {

            bagDemoBag_ = value;
            bitField0_ |= 0x00000002;
            onChanged();
            return this;
        }

        /**
         * <code>bool bagDemoBag = 2;</code>
         *
         * @return This builder for chaining.
         */
        public Builder clearBagDemoBag() {
            bitField0_ = (bitField0_ & ~0x00000002);
            bagDemoBag_ = false;
            onChanged();
            return this;
        }

        /**
         * <code>int32 bagZoom = 3;</code>
         *
         * @return The bagZoom.
         */
        @java.lang.Override
        public int getBagZoom() {
            return bagZoom_;
        }

        /**
         * <code>int32 bagZoom = 3;</code>
         *
         * @param value The bagZoom to set.
         * @return This builder for chaining.
         */
        public Builder setBagZoom(int value) {

            bagZoom_ = value;
            bitField0_ |= 0x00000004;
            onChanged();
            return this;
        }

        /**
         * <code>int32 bagZoom = 3;</code>
         *
         * @return This builder for chaining.
         */
        public Builder clearBagZoom() {
            bitField0_ = (bitField0_ & ~0x00000004);
            bagZoom_ = 0;
            onChanged();
            return this;
        }

        private void ensureDiceIsMutable() {
            if ((bitField0_ & 0x00000008) == 0) {
                dice_ = new java.util.ArrayList<com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer>(dice_);
                bitField0_ |= 0x00000008;
            }
        }

        /**
         * <code>repeated .com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer dice = 4;</code>
         */
        public java.util.List<com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer> getDiceList() {
            if (diceBuilder_ == null) {
                return java.util.Collections.unmodifiableList(dice_);
            } else {
                return diceBuilder_.getMessageList();
            }
        }

        /**
         * <code>repeated .com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer dice = 4;</code>
         */
        public int getDiceCount() {
            if (diceBuilder_ == null) {
                return dice_.size();
            } else {
                return diceBuilder_.getCount();
            }
        }

        /**
         * <code>repeated .com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer dice = 4;</code>
         */
        public com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer getDice(int index) {
            if (diceBuilder_ == null) {
                return dice_.get(index);
            } else {
                return diceBuilder_.getMessage(index);
            }
        }

        /**
         * <code>repeated .com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer dice = 4;</code>
         */
        public Builder setDice(
                int index, com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer value) {
            if (diceBuilder_ == null) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureDiceIsMutable();
                dice_.set(index, value);
                onChanged();
            } else {
                diceBuilder_.setMessage(index, value);
            }
            return this;
        }

        /**
         * <code>repeated .com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer dice = 4;</code>
         */
        public Builder setDice(
                int index, com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer.Builder builderForValue) {
            if (diceBuilder_ == null) {
                ensureDiceIsMutable();
                dice_.set(index, builderForValue.build());
                onChanged();
            } else {
                diceBuilder_.setMessage(index, builderForValue.build());
            }
            return this;
        }

        /**
         * <code>repeated .com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer dice = 4;</code>
         */
        public Builder addDice(com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer value) {
            if (diceBuilder_ == null) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureDiceIsMutable();
                dice_.add(value);
                onChanged();
            } else {
                diceBuilder_.addMessage(value);
            }
            return this;
        }

        /**
         * <code>repeated .com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer dice = 4;</code>
         */
        public Builder addDice(
                int index, com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer value) {
            if (diceBuilder_ == null) {
                if (value == null) {
                    throw new NullPointerException();
                }
                ensureDiceIsMutable();
                dice_.add(index, value);
                onChanged();
            } else {
                diceBuilder_.addMessage(index, value);
            }
            return this;
        }

        /**
         * <code>repeated .com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer dice = 4;</code>
         */
        public Builder addDice(
                com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer.Builder builderForValue) {
            if (diceBuilder_ == null) {
                ensureDiceIsMutable();
                dice_.add(builderForValue.build());
                onChanged();
            } else {
                diceBuilder_.addMessage(builderForValue.build());
            }
            return this;
        }

        /**
         * <code>repeated .com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer dice = 4;</code>
         */
        public Builder addDice(
                int index, com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer.Builder builderForValue) {
            if (diceBuilder_ == null) {
                ensureDiceIsMutable();
                dice_.add(index, builderForValue.build());
                onChanged();
            } else {
                diceBuilder_.addMessage(index, builderForValue.build());
            }
            return this;
        }

        /**
         * <code>repeated .com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer dice = 4;</code>
         */
        public Builder addAllDice(
                java.lang.Iterable<? extends com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer> values) {
            if (diceBuilder_ == null) {
                ensureDiceIsMutable();
                com.google.protobuf.AbstractMessageLite.Builder.addAll(
                        values, dice_);
                onChanged();
            } else {
                diceBuilder_.addAllMessages(values);
            }
            return this;
        }

        /**
         * <code>repeated .com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer dice = 4;</code>
         */
        public Builder clearDice() {
            if (diceBuilder_ == null) {
                dice_ = java.util.Collections.emptyList();
                bitField0_ = (bitField0_ & ~0x00000008);
                onChanged();
            } else {
                diceBuilder_.clear();
            }
            return this;
        }

        /**
         * <code>repeated .com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer dice = 4;</code>
         */
        public Builder removeDice(int index) {
            if (diceBuilder_ == null) {
                ensureDiceIsMutable();
                dice_.remove(index);
                onChanged();
            } else {
                diceBuilder_.remove(index);
            }
            return this;
        }

        /**
         * <code>repeated .com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer dice = 4;</code>
         */
        public com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer.Builder getDiceBuilder(
                int index) {
            return getDiceFieldBuilder().getBuilder(index);
        }

        /**
         * <code>repeated .com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer dice = 4;</code>
         */
        public com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBufferOrBuilder getDiceOrBuilder(
                int index) {
            if (diceBuilder_ == null) {
                return dice_.get(index);
            } else {
                return diceBuilder_.getMessageOrBuilder(index);
            }
        }

        /**
         * <code>repeated .com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer dice = 4;</code>
         */
        public java.util.List<? extends com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBufferOrBuilder>
        getDiceOrBuilderList() {
            if (diceBuilder_ != null) {
                return diceBuilder_.getMessageOrBuilderList();
            } else {
                return java.util.Collections.unmodifiableList(dice_);
            }
        }

        /**
         * <code>repeated .com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer dice = 4;</code>
         */
        public com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer.Builder addDiceBuilder() {
            return getDiceFieldBuilder().addBuilder(
                    com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer.getDefaultInstance());
        }

        /**
         * <code>repeated .com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer dice = 4;</code>
         */
        public com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer.Builder addDiceBuilder(
                int index) {
            return getDiceFieldBuilder().addBuilder(
                    index, com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer.getDefaultInstance());
        }

        /**
         * <code>repeated .com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer dice = 4;</code>
         */
        public java.util.List<com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer.Builder>
        getDiceBuilderList() {
            return getDiceFieldBuilder().getBuilderList();
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
                com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer, com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer.Builder, com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBufferOrBuilder>
        getDiceFieldBuilder() {
            if (diceBuilder_ == null) {
                diceBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                        com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer, com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBuffer.Builder, com.github.jameshnsears.chance.data.protocolbuffer.DiceProtocolBufferOrBuilder>(
                        dice_,
                        ((bitField0_ & 0x00000008) != 0),
                        getParentForChildren(),
                        isClean());
                dice_ = null;
            }
            return diceBuilder_;
        }

        /**
         * <code>bool rollSequentially = 5;</code>
         *
         * @return The rollSequentially.
         */
        @java.lang.Override
        public boolean getRollSequentially() {
            return rollSequentially_;
        }

        /**
         * <code>bool rollSequentially = 5;</code>
         *
         * @param value The rollSequentially to set.
         * @return This builder for chaining.
         */
        public Builder setRollSequentially(boolean value) {

            rollSequentially_ = value;
            bitField0_ |= 0x00000010;
            onChanged();
            return this;
        }

        /**
         * <code>bool rollSequentially = 5;</code>
         *
         * @return This builder for chaining.
         */
        public Builder clearRollSequentially() {
            bitField0_ = (bitField0_ & ~0x00000010);
            rollSequentially_ = false;
            onChanged();
            return this;
        }

        /**
         * <code>int32 rollZoom = 6;</code>
         *
         * @return The rollZoom.
         */
        @java.lang.Override
        public int getRollZoom() {
            return rollZoom_;
        }

        /**
         * <code>int32 rollZoom = 6;</code>
         *
         * @param value The rollZoom to set.
         * @return This builder for chaining.
         */
        public Builder setRollZoom(int value) {

            rollZoom_ = value;
            bitField0_ |= 0x00000020;
            onChanged();
            return this;
        }

        /**
         * <code>int32 rollZoom = 6;</code>
         *
         * @return This builder for chaining.
         */
        public Builder clearRollZoom() {
            bitField0_ = (bitField0_ & ~0x00000020);
            rollZoom_ = 0;
            onChanged();
            return this;
        }

        /**
         * <code>bool rollTitle = 7;</code>
         *
         * @return The rollTitle.
         */
        @java.lang.Override
        public boolean getRollTitle() {
            return rollTitle_;
        }

        /**
         * <code>bool rollTitle = 7;</code>
         *
         * @param value The rollTitle to set.
         * @return This builder for chaining.
         */
        public Builder setRollTitle(boolean value) {

            rollTitle_ = value;
            bitField0_ |= 0x00000040;
            onChanged();
            return this;
        }

        /**
         * <code>bool rollTitle = 7;</code>
         *
         * @return This builder for chaining.
         */
        public Builder clearRollTitle() {
            bitField0_ = (bitField0_ & ~0x00000040);
            rollTitle_ = false;
            onChanged();
            return this;
        }

        /**
         * <code>bool rollSlideNumber = 8;</code>
         *
         * @return The rollSlideNumber.
         */
        @java.lang.Override
        public boolean getRollSlideNumber() {
            return rollSlideNumber_;
        }

        /**
         * <code>bool rollSlideNumber = 8;</code>
         *
         * @param value The rollSlideNumber to set.
         * @return This builder for chaining.
         */
        public Builder setRollSlideNumber(boolean value) {

            rollSlideNumber_ = value;
            bitField0_ |= 0x00000080;
            onChanged();
            return this;
        }

        /**
         * <code>bool rollSlideNumber = 8;</code>
         *
         * @return This builder for chaining.
         */
        public Builder clearRollSlideNumber() {
            bitField0_ = (bitField0_ & ~0x00000080);
            rollSlideNumber_ = false;
            onChanged();
            return this;
        }

        /**
         * <code>bool rollTotal = 9;</code>
         *
         * @return The rollTotal.
         */
        @java.lang.Override
        public boolean getRollTotal() {
            return rollTotal_;
        }

        /**
         * <code>bool rollTotal = 9;</code>
         *
         * @param value The rollTotal to set.
         * @return This builder for chaining.
         */
        public Builder setRollTotal(boolean value) {

            rollTotal_ = value;
            bitField0_ |= 0x00000100;
            onChanged();
            return this;
        }

        /**
         * <code>bool rollTotal = 9;</code>
         *
         * @return This builder for chaining.
         */
        public Builder clearRollTotal() {
            bitField0_ = (bitField0_ & ~0x00000100);
            rollTotal_ = false;
            onChanged();
            return this;
        }

        /**
         * <code>bool rollHistory = 10;</code>
         *
         * @return The rollHistory.
         */
        @java.lang.Override
        public boolean getRollHistory() {
            return rollHistory_;
        }

        /**
         * <code>bool rollHistory = 10;</code>
         *
         * @param value The rollHistory to set.
         * @return This builder for chaining.
         */
        public Builder setRollHistory(boolean value) {

            rollHistory_ = value;
            bitField0_ |= 0x00000200;
            onChanged();
            return this;
        }

        /**
         * <code>bool rollHistory = 10;</code>
         *
         * @return This builder for chaining.
         */
        public Builder clearRollHistory() {
            bitField0_ = (bitField0_ & ~0x00000200);
            rollHistory_ = false;
            onChanged();
            return this;
        }

        /**
         * <code>bool rollSound = 11;</code>
         *
         * @return The rollSound.
         */
        @java.lang.Override
        public boolean getRollSound() {
            return rollSound_;
        }

        /**
         * <code>bool rollSound = 11;</code>
         *
         * @param value The rollSound to set.
         * @return This builder for chaining.
         */
        public Builder setRollSound(boolean value) {

            rollSound_ = value;
            bitField0_ |= 0x00000400;
            onChanged();
            return this;
        }

        /**
         * <code>bool rollSound = 11;</code>
         *
         * @return This builder for chaining.
         */
        public Builder clearRollSound() {
            bitField0_ = (bitField0_ & ~0x00000400);
            rollSound_ = false;
            onChanged();
            return this;
        }

        @java.lang.Override
        public Builder setUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.setUnknownFields(unknownFields);
        }

        @java.lang.Override
        public Builder mergeUnknownFields(
                final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:com.github.jameshnsears.chance.data.protocolbuffer.BagProtocolBuffer)
    }

}

